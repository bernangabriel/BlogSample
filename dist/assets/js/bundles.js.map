{"version":3,"sources":["app.module.js","app.constants.js","app.routes.js","about/about.routes.js","home/home.routes.js","user/user.routes.js","post/post.routes.js","comment/comment.services.js","util/util.services.js","user/user.services.js","post/post.services.js","about/about.controller.js","home/home.controller.js","user/user.controller.js","post/post-details.controller.js","post/post.controller.js","components/post-author/post-author.directive.js","components/post-comments/post-comments.directive.js","components/user-widget/user-widget.directive.js"],"names":["angular","module","window","constant","api","config","$stateProvider","$urlRouterProvider","otherwise","$inject","state","url","templateUrl","controller","title","postList","postService","get","resolve","commentService","$http","constants","getByPostId","id","insert","comment","post","service","factory","util","$ngConfirm","successMessage","content","type","buttons","close","$scope","button","userService","getAll","getById","deletePost","delete","updatePost","put","getPostsByUser","aboutCtrl","$rootScope","enabledPostSearch","homeCtrl","userCtrl","getUsers","then","result","data","vm","users","this","postDetailsCtrl","$stateParams","$state","getPostDetails","postResult","details","go","ex","postCtrl","$uibModal","showMorePosts","posts","newSize","length","newPostSize","refreshAllPost","viewUser","userId","currentUser","contentUrl","scope","editPost","postData","modalInstance","open","$innerScope","save","text","btnClass","action","openAddNewPost","addNewPost","size","_mapper","map","item","user","filter","u","userName","name","reverse","slice","searchPost","setTimeout","postAuthor","directive","restrict","userResult","postComments","openAddNewComment","postId","add","getComments","commentResult","comments","userWidget"],"mappings":"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","file":"bundles.js","sourcesContent":["(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('app.module', [\r\n            'ui.router',\r\n            'ui.bootstrap',\r\n            'cp.ngConfirm'\r\n        ]);\r\n})(window.angular);","(function (angular) {\r\n    angular\r\n        .module('app.module')\r\n        .constant('constants', { api: 'http://localhost:3000/' });\r\n})(window.angular);","(function (angular) {\r\n    angular\r\n        .module('app.module')\r\n        .config(config);\r\n\r\n    config\r\n        .$inject = ['$stateProvider', '$urlRouterProvider'];\r\n    function config($stateProvider, $urlRouterProvider) {\r\n        $urlRouterProvider.otherwise('/home');\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('app.module')\r\n        .config(config);\r\n\r\n    config\r\n        .$inject = ['$stateProvider'];\r\n\r\n    function config($stateProvider) {\r\n        $stateProvider\r\n            .state('about', {\r\n                url: '/about',\r\n                templateUrl: 'about.html',\r\n                controller: 'aboutCtrl as vm'\r\n            });\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('app.module')\r\n        .config(config);\r\n\r\n    config\r\n        .$inject = ['$stateProvider', '$urlRouterProvider'];\r\n    function config($stateProvider, $urlRouterProvider) {\r\n\r\n        $stateProvider\r\n            .state('home', {\r\n                url:'/home',\r\n                templateUrl: 'home.html',\r\n                controller: 'homeCtrl as vm',\r\n                title: 'Home'\r\n            });\r\n\r\n        $urlRouterProvider.otherwise('/home');\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('app.module')\r\n        .config(config);\r\n\r\n    config\r\n        .$inject = ['$stateProvider'];\r\n\r\n    function config($stateProvider) {\r\n        $stateProvider\r\n            .state('user', {\r\n                url: '/user',\r\n                templateUrl: 'user.html',\r\n                controller: 'userCtrl as vm'\r\n            });\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('app.module')\r\n        .config(config);\r\n\r\n    config\r\n        .$inject = ['$stateProvider', '$urlRouterProvider'];\r\n    function config($stateProvider, $urlRouterProvider) {\r\n        $stateProvider\r\n            .state('post', {\r\n                url: '/post',\r\n                templateUrl: 'post.html',\r\n                controller: 'postCtrl as vm',\r\n                resolve: {\r\n                    postList: postList\r\n                }\r\n            })\r\n            .state('details', {\r\n                url: '/details/:id',\r\n                templateUrl: 'post-details.html',\r\n                controller: 'postDetailsCtrl as vm'\r\n            });\r\n\r\n\r\n        postList\r\n            .$inject = ['postService'];\r\n        function postList(postService) {\r\n            return postService.get();\r\n        }\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('app.module')\r\n        .factory('commentService', commentService);\r\n\r\n    commentService\r\n        .$inject = ['$http', 'constants'];\r\n    function commentService($http, constants) {\r\n        var service = {\r\n            getByPostId: getByPostId,\r\n            insert:insert\r\n        };\r\n\r\n        function getByPostId(id) {\r\n           return $http.get(constants.api + 'comments?postId=' + id);\r\n        }\r\n        \r\n        function insert(comment){\r\n            return $http.post(constants.api+'comments',comment);\r\n        }\r\n\r\n        return service;\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    angular\r\n        .module('app.module')\r\n        .factory('util', util);\r\n\r\n    util\r\n        .$inject = ['$ngConfirm'];\r\n\r\n    function util($ngConfirm) {\r\n        var service = {\r\n            successMessage: successMessage\r\n        };\r\n\r\n        function successMessage(title, content) {\r\n            $ngConfirm({\r\n                title: title,\r\n                type: 'green',\r\n                content: content,\r\n                buttons: {\r\n                    close: function ($scope, button) {\r\n\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        \r\n        return service;\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('app.module')\r\n        .factory('userService', userService);\r\n\r\n    userService\r\n        .$inject = ['$http', 'constants'];\r\n    function userService($http, constants) {\r\n        var service = {\r\n            getAll:getAll,\r\n            getById: getById\r\n        };\r\n        \r\n        function getAll(){\r\n            return $http.get(constants.api+'users');\r\n        }\r\n\r\n        function getById(id) {\r\n            return $http.get(constants.api + 'users/' + id);\r\n        }\r\n\r\n        return service;\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('app.module')\r\n        .factory('postService', postService);\r\n\r\n    postService\r\n        .$inject = ['$http', 'constants'];\r\n\r\n    function postService($http, constants) {\r\n        var service = {\r\n            get: get,\r\n            getById: getById,\r\n            insert: insert,\r\n            deletePost: deletePost,\r\n            updatePost: updatePost,\r\n            getPostsByUser: getPostsByUser\r\n        };\r\n\r\n        function get() {\r\n            return $http.get(constants.api + 'posts');\r\n        }\r\n\r\n        function getById(id) {\r\n            return $http.get(constants.api + 'posts/' + id);\r\n        }\r\n\r\n        function insert(post) {\r\n            return $http.post(constants.api + 'posts', post);\r\n        }\r\n\r\n        function deletePost(id) {\r\n            return $http.delete(constants.api + 'posts/' + id);\r\n        }\r\n\r\n        function updatePost(post) {\r\n            return $http.put(constants.api + 'posts/' + post.id, post);\r\n        }\r\n\r\n        function getPostsByUser(id) {\r\n            return $http.get(constants.api + 'posts?userId=' + id);\r\n        }\r\n\r\n        return service;\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    angular\r\n        .module('app.module')\r\n        .controller('aboutCtrl', aboutCtrl);\r\n\r\n    aboutCtrl\r\n        .$inject = ['$scope','$rootScope'];\r\n\r\n    function aboutCtrl($scope, $rootScope) {\r\n        $rootScope.enabledPostSearch = false;\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    angular\r\n        .module('app.module')\r\n        .controller('homeCtrl', homeCtrl);\r\n\r\n    homeCtrl\r\n        .$inject = ['$scope', '$rootScope'];\r\n\r\n    function homeCtrl($scope, $rootScope) {\r\n        $rootScope.enabledPostSearch = false;\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    angular\r\n        .module('app.module')\r\n        .controller('userCtrl', userCtrl);\r\n\r\n    userCtrl\r\n        .$inject = ['$scope','$rootScope', 'userService'];\r\n\r\n    function userCtrl($scope,$rootScope, userService) {\r\n        $rootScope.enabledPostSearch = false;\r\n        var vm = this;\r\n\r\n        function getUsers() {\r\n            userService.getAll().then(function (result) {\r\n                if (result.data) {\r\n                    vm.users = result.data;\r\n                }\r\n            });\r\n        }\r\n        \r\n        getUsers(); //get all users\r\n    }\r\n\r\n})(window.angular);","(function (angular) {\r\n    angular\r\n        .module('app.module')\r\n        .controller('postDetailsCtrl', postDetailsCtrl);\r\n\r\n    postDetailsCtrl\r\n        .$inject = ['$stateParams', '$state', 'postService', 'userService'];\r\n\r\n    function postDetailsCtrl($stateParams, $state, postService, userService) {\r\n        var vm = this;\r\n\r\n        if ($stateParams.id) {\r\n            getPostDetails($stateParams.id);\r\n        } else {\r\n            $state.go('/post');\r\n        }\r\n\r\n        //get post details\r\n        function getPostDetails(id) {\r\n            try {\r\n                postService.getById(id).then(function (postResult) {\r\n\r\n                    if (postResult.data) {\r\n                        vm.details = postResult.data;\r\n                    } else {\r\n                        $state.go('/post');\r\n                    }\r\n                });\r\n            } catch (ex) {\r\n                $state.go('/post');\r\n            }\r\n        }\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    angular\r\n        .module('app.module')\r\n        .controller('postCtrl', postCtrl);\r\n\r\n    postCtrl\r\n        .$inject = ['$scope', '$rootScope', '$uibModal', '$ngConfirm', 'postService', 'userService', 'postList', 'util'];\r\n\r\n    function postCtrl($scope, $rootScope, $uibModal, $ngConfirm, postService, userService, postList, util) {\r\n        $rootScope.enabledPostSearch = true;\r\n        $rootScope.searchPost='';\r\n        \r\n        var vm = this;\r\n\r\n        $rootScope.openAddNewPost = openAddNewPost;\r\n        vm.editPost = editPost;\r\n        vm.deletePost = deletePost;\r\n        vm.viewUser = viewUser;\r\n        vm.showMorePosts = showMorePosts;\r\n\r\n        function showMorePosts() {\r\n            if (vm.posts) {\r\n                var newSize = vm.posts.length + 3;\r\n                $scope.newPostSize = newSize;\r\n                refreshAllPost(newSize);\r\n            }\r\n        }\r\n\r\n        function viewUser(post) {\r\n            if (post) {\r\n                userService.getById(post.userId).then(function (result) {\r\n                    if (result.data) {\r\n                        $scope.currentUser = result.data;\r\n                        $ngConfirm({\r\n                            title: 'User Details',\r\n                            contentUrl: 'user-details.tpl.html',\r\n                            scope: $scope,\r\n                            buttons: {\r\n                                close: function ($scope, button) {\r\n\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function editPost(postData) {\r\n            var modalInstance = $uibModal.open({\r\n                templateUrl: 'edit-post.tpl.html',\r\n                controller: ['$scope', function ($innerScope) {\r\n\r\n                    $innerScope.users = vm.users;\r\n                    $innerScope.save = save;\r\n                    $innerScope.close = close;\r\n\r\n                    postService.getById(postData.id).then(function (result) {\r\n                        if (result.data) {\r\n                            $innerScope.post = result.data;\r\n                        }\r\n                    });\r\n\r\n                    function save(post) {\r\n                        postService.updatePost(post).then(function (result) {\r\n                            close();\r\n                            refreshAllPost($scope.newPostSize); //refresh\r\n                            util.successMessage('Success', 'Post updated successfully!');\r\n                        });\r\n                    }\r\n\r\n                    function close() {\r\n                        modalInstance.close('dismiss');\r\n                    }\r\n                }]\r\n            });\r\n        }\r\n\r\n        function deletePost(post) {\r\n            if (post) {\r\n                $ngConfirm({\r\n                    title: 'Delete Post!',\r\n                    content: 'Are you sure you want to delete this post <strong>' + post.title + '</strong>',\r\n                    buttons: {\r\n                        delete: {\r\n                            text: 'Delete',\r\n                            btnClass: 'btn-red',\r\n                            action: function () {\r\n                                postService.deletePost(post.id).then(function (result) {\r\n                                    if (result.data) {\r\n                                        refreshAllPost($scope.newPostSize); //refresh all post\r\n                                        util.successMessage('Success', 'Post deleted successfully!');\r\n                                    }\r\n                                });\r\n                            }\r\n                        },\r\n                        close: function ($scope, button) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function openAddNewPost() {\r\n            var modalInstance = $uibModal.open({\r\n                templateUrl: 'add-new-post.tpl.html',\r\n                controller: ['$scope', 'postService', function ($innerScope, postService) {\r\n\r\n                    $innerScope.users = vm.users;\r\n                    $innerScope.addNewPost = addNewPost;\r\n                    $innerScope.close = close;\r\n\r\n                    function addNewPost(post) {\r\n                        if (post) {\r\n                            postService.insert(post).then(function (result) {\r\n                                close();\r\n                                refreshAllPost($scope.newPostSize); //refresh all post\r\n                                util.successMessage('Success', 'Post added successfully!');\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    function close() {\r\n                        modalInstance.close('dismiss');\r\n                    }\r\n                }]\r\n            });\r\n        }\r\n\r\n        function getUsers() {\r\n            userService.getAll().then(function (result) {\r\n                vm.users = result.data;\r\n            });\r\n        }\r\n\r\n        function refreshAllPost(size) {\r\n            postService.get().then(function (result) {\r\n                if (result.data) {\r\n                    var _mapper = result.data.map(function (item) {\r\n                        if (item.userId) {\r\n                            var user = vm.users.filter(function (u) {\r\n                                if (u.id == item.userId) {\r\n                                    return item;\r\n                                }\r\n                            });\r\n\r\n                            if (user) {\r\n                                item.userName = user[0].name;\r\n                            }\r\n                        }\r\n                        return item;\r\n                    });\r\n\r\n                    vm.posts = _mapper.reverse().slice(0, size | 3);\r\n                }\r\n\r\n            });\r\n        }\r\n\r\n        getUsers(); //get all users\r\n\r\n        setTimeout(function () {\r\n            refreshAllPost(3); // show post\r\n        }, 25);\r\n\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('app.module')\r\n        .directive('postAuthor', postAuthor);\r\n\r\n    postAuthor\r\n        .$inject = ['$stateParams', 'postService', 'userService'];\r\n\r\n    function postAuthor($stateParams, postService, userService) {\r\n        var directive = {\r\n            restrict: 'EA',\r\n            templateUrl: 'post-author/post-author.tpl.html',\r\n            controller: ['$scope', function ($scope) {\r\n                if ($stateParams.id) {\r\n                    postService.getById($stateParams.id).then(function (postResult) {\r\n                        if (postResult.data) {\r\n                            if (postResult.data.userId) {\r\n                                userService.getById(postResult.data.userId).then(function (userResult) {\r\n                                    if (userResult.data) {\r\n                                        $scope.user = userResult.data;\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }]\r\n        };\r\n        return directive;\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('app.module')\r\n        .directive('postComments', postComments);\r\n\r\n    postComments\r\n        .$inject = ['$stateParams', 'commentService'];\r\n\r\n    function postComments($stateParams, commentService) {\r\n        var directive = {\r\n            restrict: 'EA',\r\n            templateUrl: 'post-comments/post-comments.tpl.html',\r\n            controller: controller\r\n        };\r\n\r\n        controller\r\n            .$inject = ['$scope', '$uibModal'];\r\n\r\n        function controller($scope, $uibModal) {\r\n            \r\n            $scope.openAddNewComment = openAddNewComment;\r\n            $scope.postId = $stateParams.id;\r\n\r\n            getComments(); //get all comments\r\n\r\n            function openAddNewComment() {\r\n                if ($scope.postId) {\r\n                    var modalInstance = $uibModal.open({\r\n                        templateUrl: 'post-comments/add-new-comment.tpl.html',\r\n                        controller: ['$scope', function ($innerScope) {\r\n\r\n                            $innerScope.add = add;\r\n                            $innerScope.close = close;\r\n\r\n                            function add(comment) {\r\n                                if (comment) {\r\n                                    comment.postId = $scope.postId;\r\n                                    commentService.insert(comment).then(function (result) {\r\n                                        close();\r\n                                        getComments();\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            function close() {\r\n                                modalInstance.close('dismiss');\r\n                            }\r\n                        }]\r\n                    });\r\n                }\r\n            }\r\n\r\n            function getComments() {\r\n                if ($scope.postId) {\r\n                    commentService.getByPostId($scope.postId).then(function (commentResult) {\r\n                        $scope.comments = commentResult.data.reverse();\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return directive;\r\n    }\r\n})(window.angular);","(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('app.module')\r\n        .directive('userWidget', userWidget);\r\n\r\n    function userWidget() {\r\n        var directive = {\r\n            restrict: 'EA',\r\n            templateUrl: 'user-widget/user-widget.tpl.html',\r\n            controller: ['$scope', 'userService', 'postService', function ($scope, userService, postService) {\r\n                userService.getAll().then(function (result) {\r\n                    if (result.data) {\r\n                        $scope.users = result.data;\r\n                    }\r\n                });\r\n            }]\r\n        };\r\n        return directive;\r\n    }\r\n})(window.angular);"]}